{"ast":null,"code":"var _jsxFileName = \"/home/voold/Desktop/tg/src/UI.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './UI.css';\nimport AnswerBox from './AnswerBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UI() {\n  _s();\n  class Graph {\n    constructor() {\n      this.adjacencyList = {}; // список смежности аля\n    }\n    clearGraph() {\n      this.adjacencyList = {};\n    }\n\n    //Добавить вершину\n    addEdge(start, end, weight) {\n      if (!this.adjacencyList[start]) {\n        this.adjacencyList[start] = [];\n      }\n      if (Object.values(this.adjacencyList[start]).filter(item => item.node === end).length == 0) {\n        this.adjacencyList[start].push({\n          node: end,\n          weight: weight\n        });\n      } else {\n        Object.values(this.adjacencyList[start]).map(item => {\n          if (item.node == end) item.weight = weight;\n        });\n      }\n      // в список смежности к вершине вставляем узел (end) и вес пути к нему\n    }\n    getNeighbors(node) {\n      return this.adjacencyList[node] || [];\n    }\n\n    //Ищем кратчайший путь от 1 вершины до другой по Дейкстру\n    findShortestPath(start, end) {\n      const distances = {}; // расстояния\n      const previous = {}; // предыдущие\n      const queue = new PriorityQueue(); // Очередь с приоритетом\n\n      for (const edge in this.adjacencyList) {\n        distances[edge] = Infinity;\n        previous[edge] = null;\n      } // Сперва проставили все расстояния как бесконечность, а предыдущие пустые\n\n      distances[start] = 0;\n      queue.enqueue(start, 0); // Добавили в приоритетную очередь первую вершину\n\n      while (!queue.isEmpty()) {\n        const currentEdge = queue.dequeue().element; // удаляет самый приоритетный элемент - возвращает его же\n\n        if (currentEdge === end) {\n          const path = [];\n          let temp = currentEdge;\n          while (temp) {\n            path.push(temp);\n            temp = previous[temp];\n          }\n          return path.reverse();\n        }\n        for (const neighbor of this.getNeighbors(currentEdge)) {\n          // for .. of - neighbor будет мини объектиком {node:.. ,weight:..}\n          const alt = distances[currentEdge] + neighbor.weight;\n          if (alt < distances[neighbor.node]) {\n            distances[neighbor.node] = alt; // дистанция от соседнего узла\n            previous[neighbor.node] = currentEdge; // предыдущая вершина для соседнего узла  - эта вершина\n            queue.enqueue(neighbor.node, alt); // добавляем в приоритетную очередь [вершина, дистанция до нее] (приоритет по дистанции как раз)\n          }\n        }\n      }\n      return []; // Если путь не найден\n    }\n    kShortestPaths(start, end, k) {\n      let MRemovedEdges = [];\n      const firstPath = this.findShortestPath(start, end);\n      const paths = [firstPath.join('')];\n      const pathCosts = [this.calculatePathCost(firstPath)];\n      const uniquePaths = new Set(paths.map(path => path)); // Используем Set для уникальности\n\n      for (let i = 0; i < Object.values(Object.values(graph)[0]).length; i++) {\n        let newPaths = [];\n        for (let j = 0; j < paths.length; j++) {\n          const path = paths[j];\n          const pathCost = pathCosts[j];\n          for (let n = 0; n < path.length - 1; n++) {\n            const tempNode = path[n];\n            const rootPath = path.slice(0, n + 1);\n            const removedEdges = this.removeEdges(rootPath);\n            MRemovedEdges.push(...removedEdges);\n\n            //const tempPath = this.findShortestPath(start, end);\n            const tempPath = this.findShortestPath(tempNode, end);\n            if (tempPath.length > 0) {\n              const totalPath = rootPath + tempPath.slice(1).join(\"\");\n              const totalCost = this.calculatePathCost(totalPath);\n              const pathKey = totalPath;\n              if (!uniquePaths.has(pathKey) && totalPath[0] === start && totalPath[totalPath.length - 1] === end) {\n                newPaths.push({\n                  path: totalPath,\n                  cost: totalCost\n                });\n                uniquePaths.add(pathKey); // Добавляем путь в Set\n              }\n            }\n          }\n        }\n\n        //this.restoreEdges(MRemovedEdges);\n\n        // Сортируем новые пути по стоимости\n        newPaths.sort((a, b) => a.cost - b.cost);\n\n        // Добавляем только уникальные пути\n        for (const newPath of newPaths) {\n          if (paths.length < k) {\n            paths.push(newPath.path);\n            pathCosts.push(newPath.cost);\n          } else {\n            break; // Если мы уже нашли k путей, выходим\n          }\n        }\n        if (paths.length >= k) break;\n      }\n      this.restoreEdges(MRemovedEdges);\n      return {\n        paths: paths,\n        costs: pathCosts\n      };\n      /* return paths.slice(0, k); */\n    }\n    calculatePathCost(path) {\n      let cost = 0;\n      for (let i = 0; i < path.length - 1; i++) {\n        const neighbors = this.getNeighbors(path[i]);\n        for (const neighbor of neighbors) {\n          if (neighbor.node === path[i + 1]) {\n            cost += neighbor.weight;\n            break;\n          }\n        }\n      }\n      return cost;\n    }\n    removeEdges(rootPath) {\n      const removedEdges = [];\n      for (let i = 0; i < rootPath.length - 1; i++) {\n        const start = rootPath[i];\n        const end = rootPath[i + 1];\n        const neighbors = this.getNeighbors(start);\n        for (const neighbor of neighbors) {\n          if (neighbor.node === end) {\n            removedEdges.push({\n              start: start,\n              end: end,\n              weight: neighbor.weight\n            });\n            this.adjacencyList[start] = this.adjacencyList[start].filter(edge => edge.node !== end);\n            break;\n          }\n        }\n      }\n      if (!removedEdges.length == 0) {\n        console.log(\"i remove this Edges: \");\n        console.log(removedEdges);\n      }\n      return removedEdges;\n    }\n    restoreEdges(removedEdges) {\n      for (const edge of removedEdges) {\n        this.addEdge(edge.start, edge.end, edge.weight);\n      }\n    }\n    graphInfo() {\n      console.log(this.adjacencyList);\n    }\n  }\n  class PriorityQueue {\n    constructor() {\n      this.items = [];\n    }\n    enqueue(element, priority) {\n      this.items.push({\n        element,\n        priority\n      });\n      this.items.sort((a, b) => a.priority - b.priority);\n    }\n    dequeue() {\n      return this.items.shift();\n    }\n    isEmpty() {\n      return this.items.length === 0;\n    }\n  }\n  let graph = new Graph();\n  const [graphState, setGraphState] = useState(graph);\n  const [tvGraph, setTvGraph] = useState(\"\");\n  const [answersList, setAnswersList] = useState([]);\n  const set_nodeState = e => {\n    e.preventDefault();\n    graph.adjacencyList = graphState.adjacencyList;\n    if (!e.target[\"A\"].value.replaceAll(' ', '').isEmpty && !e.target[\"B\"].value.replaceAll(' ', '').isEmpty && e.target[\"C\"].value != 0 && !e.target[\"C\"].value.isEmpty) {\n      graph.addEdge(e.target[\"A\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"C\"].value);\n    }\n    ;\n    console.log(e.target[\"C\"].value);\n    console.log(typeof e.target[\"C\"].value);\n    setGraphState(graph);\n    getTvGraph();\n  };\n  function getTvGraph() {\n    let str = \"\";\n    for (let node of Object.keys(graph.adjacencyList)) {\n      str += \" |\" + node + \"| \";\n      for (let neighbor of graph.getNeighbors(node)) {\n        str += \" \" + neighbor.node;\n      }\n      str += \"\\n\";\n    }\n    setTvGraph(str);\n  }\n  useEffect(() => {\n    setTvGraph(tvGraph);\n  }, [graphState]);\n  function aboutGraph() {\n    let info = \"Текущий граф:\\n\";\n    graph.adjacencyList = graphState.adjacencyList;\n    for (let node of Object.keys(graph.adjacencyList)) {\n      info += \" |\" + node + \"| \";\n      for (let neighbor of graph.getNeighbors(node)) {\n        info += \" \" + neighbor.node + \" (\" + neighbor.weight + \") \";\n      }\n      info += \"\\n\";\n    }\n    alert(info);\n  }\n  function getDemo(e) {\n    graph.clearGraph();\n    const G1 = () => {\n      graph.addEdge('A', 'B', 2);\n      graph.addEdge('A', 'C', 10);\n      graph.addEdge('A', 'D', 3);\n      graph.addEdge('B', 'C', 3);\n      graph.addEdge('D', 'C', 1);\n      graph.addEdge('C', 'E', 2);\n      graph.addEdge('E', 'D', 5);\n    };\n    const G2 = () => {\n      graph.addEdge('A', 'B', 2);\n      graph.addEdge('A', 'F', 3);\n      graph.addEdge('B', 'C', 2);\n      graph.addEdge('C', 'B', 3);\n      graph.addEdge('C', 'A', 4);\n      graph.addEdge('D', 'B', 7);\n      graph.addEdge('E', 'D', 9);\n      graph.addEdge('E', 'F', 5);\n      graph.addEdge('E', 'G', 6);\n      graph.addEdge('F', 'C', 8);\n      graph.addEdge('F', 'G', 2);\n      graph.addEdge('G', 'A', 5);\n      graph.addEdge('G', 'F', 1);\n      graph.addEdge('E', 'Q', 4);\n      graph.addEdge('Q', 'A', 4);\n      graph.addEdge('E', 'R', 3);\n      graph.addEdge('R', 'A', 3);\n    };\n    switch (e.target.innerHTML) {\n      case \"G1\":\n        G1();\n        setGraphState(graph);\n        break;\n      case \"G2\":\n        G2();\n        setGraphState(graph);\n        break;\n      case \"N\":\n        setGraphState(graph);\n        break;\n    }\n    setGraphState(graph);\n    getTvGraph();\n  }\n  function calculate_paths(e) {\n    e.preventDefault();\n    graph.adjacencyList = graphState.adjacencyList;\n    let paths = null;\n    if (!e.target[\"C\"].value.replaceAll(' ', '').isEmpty && !e.target[\"B\"].value.replaceAll(' ', '').isEmpty && e.target[\"A\"].value != 0 && !e.target[\"A\"].value.isEmpty) {\n      paths = graph.kShortestPaths(e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"C\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"A\"].value);\n      setAnswersList(() => [{\n        k: e.target[\"A\"].value,\n        A: e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(),\n        B: e.target[\"C\"].value.replaceAll(' ', '').toUpperCase(),\n        paths: paths.paths,\n        costs: paths.costs\n      }, ...answersList]);\n    }\n    ;\n  }\n  function clearAnswerList() {\n    setAnswersList([]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_UI_box\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0421\\u043F\\u0438\\u0441\\u043A\\u0438 \\u0441\\u043C\\u0435\\u0436\\u043D\\u043E\\u0441\\u0442\\u0438 \", /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"infoBut\",\n        title: \"\\u041F\\u043E\\u0434\\u0440\\u043E\\u0431\\u043D\\u0435\\u0435...\",\n        onClick: aboutGraph,\n        children: \"i\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: tvGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"set_node\",\n      onSubmit: set_nodeState,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputField\",\n        type: \"text\",\n        placeholder: \"[\\u04121]\",\n        name: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputField\",\n        type: \"text\",\n        placeholder: \"[\\u04122]\",\n        name: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputField\",\n        type: \"number\",\n        min: \"0\",\n        placeholder: \"[\\u0414\\u043B\\u0438\\u043D\\u0430]\",\n        name: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"addBut\",\n        form: \"set_node\",\n        type: \"submit\",\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"demoGraphs\",\n      children: [\"\\u0414\\u0435\\u043C\\u043E:\", /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"infoBut\",\n        onClick: getDemo,\n        children: \"G1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"infoBut\",\n        onClick: getDemo,\n        children: \"G2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"infoBut\",\n        onClick: getDemo,\n        children: \"N\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"calculate_paths\",\n      onSubmit: calculate_paths,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041D\\u0430\\u0439\\u0442\\u0438 k \\u043D\\u0430\\u0438\\u043C\\u0435\\u043D\\u044C\\u0448\\u0438\\u0445 \\u043F\\u0443\\u0442\\u0435\\u0439 \", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"infoBut\",\n          title: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C...\",\n          onClick: clearAnswerList,\n          children: \"\\u0421\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 41\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputField\",\n        type: \"number\",\n        min: \"0\",\n        placeholder: \"[k]\",\n        name: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputField\",\n        type: \"text\",\n        placeholder: \"[\\u04121]\",\n        name: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputField\",\n        type: \"text\",\n        placeholder: \"[\\u04122]\",\n        name: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"addBut\",\n        form: \"calculate_paths\",\n        type: \"submit\",\n        children: \"\\u0420\\u0430\\u0441\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"answer_wrapper\",\n      children: answersList.map(item => /*#__PURE__*/_jsxDEV(AnswerBox, {\n        k: item.k,\n        A: item.A,\n        B: item.B,\n        paths: item.paths,\n        costs: item.costs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 7\n  }, this);\n}\n_s(UI, \"B6G0x0Gk6AXjODZZrqvWT+U+bU8=\");\n_c = UI;\nexport default UI;\nvar _c;\n$RefreshReg$(_c, \"UI\");","map":{"version":3,"names":["useEffect","useState","AnswerBox","jsxDEV","_jsxDEV","UI","_s","Graph","constructor","adjacencyList","clearGraph","addEdge","start","end","weight","Object","values","filter","item","node","length","push","map","getNeighbors","findShortestPath","distances","previous","queue","PriorityQueue","edge","Infinity","enqueue","isEmpty","currentEdge","dequeue","element","path","temp","reverse","neighbor","alt","kShortestPaths","k","MRemovedEdges","firstPath","paths","join","pathCosts","calculatePathCost","uniquePaths","Set","i","graph","newPaths","j","pathCost","n","tempNode","rootPath","slice","removedEdges","removeEdges","tempPath","totalPath","totalCost","pathKey","has","cost","add","sort","a","b","newPath","restoreEdges","costs","neighbors","console","log","graphInfo","items","priority","shift","graphState","setGraphState","tvGraph","setTvGraph","answersList","setAnswersList","set_nodeState","e","preventDefault","target","value","replaceAll","toUpperCase","getTvGraph","str","keys","aboutGraph","info","alert","getDemo","G1","G2","innerHTML","calculate_paths","A","B","clearAnswerList","className","children","class","title","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","onSubmit","type","placeholder","name","min","form","_c","$RefreshReg$"],"sources":["/home/voold/Desktop/tg/src/UI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './UI.css';\nimport AnswerBox from './AnswerBox';\n\nfunction UI() {\n\n        class Graph {\n        constructor() {\n            this.adjacencyList = {}; // список смежности аля\n        }\n\n        clearGraph(){\n            this.adjacencyList ={};\n        }\n\n        //Добавить вершину\n        addEdge(start, end, weight) {\n            if (!this.adjacencyList[start]) {\n                this.adjacencyList[start] = [];\n            }\n            if (Object.values(this.adjacencyList[start]).filter((item) => (item.node === end)).length == 0){\n                this.adjacencyList[start].push({ node: end, weight: weight }); \n            } else {\n                Object.values(this.adjacencyList[start]).map((item) => {\n                                                                if (item.node == end)\n                                                                        item.weight = weight;\n                                                                })}\n            // в список смежности к вершине вставляем узел (end) и вес пути к нему\n\n        }\n\n        getNeighbors(node) {\n            return this.adjacencyList[node] || [];\n        }\n\n        //Ищем кратчайший путь от 1 вершины до другой по Дейкстру\n        findShortestPath(start, end) { \n            const distances = {}; // расстояния\n            const previous = {}; // предыдущие\n            const queue = new PriorityQueue(); // Очередь с приоритетом\n            \n            for (const edge in this.adjacencyList) {\n                distances[edge] = Infinity;\n                previous[edge] = null;\n            } // Сперва проставили все расстояния как бесконечность, а предыдущие пустые\n            \n            distances[start] = 0;\n            queue.enqueue(start, 0); // Добавили в приоритетную очередь первую вершину\n            \n            while (!queue.isEmpty()) {\n                const currentEdge = queue.dequeue().element; // удаляет самый приоритетный элемент - возвращает его же\n                \n                if (currentEdge === end) {\n                    const path = [];\n                    let temp = currentEdge;\n                    while (temp) {\n                        path.push(temp);\n                        temp = previous[temp];\n                    }\n                    return path.reverse();\n                }\n                \n                for (const neighbor of this.getNeighbors(currentEdge)) { // for .. of - neighbor будет мини объектиком {node:.. ,weight:..}\n                    const alt = distances[currentEdge] + neighbor.weight;\n                    if (alt < distances[neighbor.node]) {\n                        distances[neighbor.node] = alt; // дистанция от соседнего узла\n                        previous[neighbor.node] = currentEdge; // предыдущая вершина для соседнего узла  - эта вершина\n                        queue.enqueue(neighbor.node, alt); // добавляем в приоритетную очередь [вершина, дистанция до нее] (приоритет по дистанции как раз)\n                    }\n                }\n            }\n            \n            return []; // Если путь не найден\n        }\n\n        kShortestPaths(start, end, k) {\n            let MRemovedEdges = []\n            const firstPath = this.findShortestPath(start, end);\n            const paths = [firstPath.join('')];\n            const pathCosts = [this.calculatePathCost(firstPath)];\n            const uniquePaths = new Set(paths.map(path => path)); // Используем Set для уникальности\n\n            for (let i = 0; i < Object.values(Object.values(graph)[0]).length; i++) {\n                let newPaths = [];\n                for (let j = 0; j < paths.length; j++) {\n                    const path = paths[j];\n                    const pathCost = pathCosts[j];\n\n                    for (let n = 0; n < path.length - 1; n++) {\n                        const tempNode = path[n];\n                        const rootPath = path.slice(0, n + 1);\n                        const removedEdges = this.removeEdges(rootPath);\n                        MRemovedEdges.push(...removedEdges);\n\n\n                        //const tempPath = this.findShortestPath(start, end);\n                        const tempPath = this.findShortestPath(tempNode, end);\n                \n\n                        if (tempPath.length > 0 ) {\n\n                            const totalPath = rootPath + tempPath.slice(1).join(\"\");\n                            const totalCost = this.calculatePathCost(totalPath);\n                            \n                            const pathKey = totalPath;\n                            if (!uniquePaths.has(pathKey) && (totalPath[0] === start) && (totalPath[totalPath.length-1] === end) ) {\n                                newPaths.push({ path: totalPath, cost: totalCost });\n                                uniquePaths.add(pathKey); // Добавляем путь в Set\n                            }\n                        }\n                    }\n                }\n\n                \n                //this.restoreEdges(MRemovedEdges);\n\n                // Сортируем новые пути по стоимости\n                newPaths.sort((a, b) => a.cost - b.cost);\n\n                // Добавляем только уникальные пути\n                for (const newPath of newPaths) {\n                    if (paths.length < k) {\n                        paths.push(newPath.path);\n                        pathCosts.push(newPath.cost);\n                    } else {\n                        break; // Если мы уже нашли k путей, выходим\n                    }\n                }\n\n                if (paths.length >= k) break;\n            }\n\n            this.restoreEdges(MRemovedEdges);\n\n            return {paths: paths, costs: pathCosts};\n            /* return paths.slice(0, k); */\n        }\n\n\n\n        calculatePathCost(path) {\n            let cost = 0;\n            for (let i = 0; i < path.length - 1; i++) {\n                const neighbors = this.getNeighbors(path[i]);\n                for (const neighbor of neighbors) {\n                    if (neighbor.node === path[i + 1]) {\n                        cost += neighbor.weight;\n                        break;\n                    }\n                }\n            }\n            return cost;\n        }\n\n\n\n        removeEdges(rootPath) {\n            const removedEdges = [];\n            for (let i = 0; i < rootPath.length - 1; i++) {\n                const start = rootPath[i];\n                const end = rootPath[i + 1];\n                const neighbors = this.getNeighbors(start);\n                for (const neighbor of neighbors) {\n                    if (neighbor.node === end) {\n                        removedEdges.push({ start: start, end: end, weight: neighbor.weight });\n                        this.adjacencyList[start] = this.adjacencyList[start].filter(edge => edge.node !== end);\n                        break;\n                    }\n                }\n            }\n            if (!removedEdges.length == 0){\n                console.log(\"i remove this Edges: \")\n                console.log(removedEdges)\n            }\n            return removedEdges;\n        }\n\n        restoreEdges(removedEdges) {\n            for (const edge of removedEdges) {\n                this.addEdge(edge.start, edge.end, edge.weight);\n            }\n        }\n\n        graphInfo () {\n            console.log(this.adjacencyList);\n        }\n    }\n\n    class PriorityQueue {\n        constructor() {\n            this.items = [];\n        }\n\n        enqueue(element, priority) {\n            this.items.push({ element, priority });\n            this.items.sort((a, b) => a.priority - b.priority);\n        }\n\n        dequeue() {\n            return this.items.shift();\n        }\n\n        isEmpty() {\n            return this.items.length === 0;\n        }\n    }\n\n    let graph = new Graph();\n\n    const [graphState, setGraphState] = useState(graph)\n    const [tvGraph, setTvGraph] = useState(\"\")\n    const [answersList, setAnswersList] = useState([])\n\n    const set_nodeState = (e) => {\n        e.preventDefault();\n\n        graph.adjacencyList = graphState.adjacencyList;\n\n\n        if (!e.target[\"A\"].value.replaceAll(' ', '').isEmpty  && !e.target[\"B\"].value.replaceAll(' ', '').isEmpty && e.target[\"C\"].value != 0 && !e.target[\"C\"].value.isEmpty){\n            graph.addEdge(e.target[\"A\"].value.replaceAll(' ', '').toUpperCase(),e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(),e.target[\"C\"].value);\n        };\n\n        console.log(e.target[\"C\"].value);\n        console.log(typeof(e.target[\"C\"].value))\n            \n        setGraphState(graph);\n\n        getTvGraph();\n    };\n\n    function getTvGraph () {\n        let str = \"\";\n\n        for (let node of Object.keys(graph.adjacencyList)){\n            str += \" |\" + node + \"| \";\n            for (let neighbor of graph.getNeighbors(node)){\n                str += (\" \" + neighbor.node)\n            }\n            str+=\"\\n\"\n        }\n        setTvGraph(str);\n    }\n\n    useEffect(() => {\n        setTvGraph(tvGraph);\n      },[graphState]) \n\n    function aboutGraph () {\n        let info = \"Текущий граф:\\n\"\n\n        graph.adjacencyList = graphState.adjacencyList;\n\n        for (let node of Object.keys(graph.adjacencyList)){\n            info += \" |\" + node + \"| \";\n            for (let neighbor of graph.getNeighbors(node)){\n                info += (\" \" + neighbor.node + \" (\"+neighbor.weight+\") \")\n            }\n            info+=\"\\n\"\n        }\n        alert(info);\n    }\n\n    function getDemo (e) {\n\n        graph.clearGraph();\n\n        const G1 = () => {\n            graph.addEdge('A', 'B', 2);\n            graph.addEdge('A', 'C', 10);\n            graph.addEdge('A', 'D', 3);\n            graph.addEdge('B', 'C', 3);\n            graph.addEdge('D', 'C', 1);\n            graph.addEdge('C', 'E', 2);\n            graph.addEdge('E', 'D', 5);\n        }\n\n        const G2 = () => {\n            graph.addEdge('A', 'B', 2);\n            graph.addEdge('A', 'F', 3);\n            graph.addEdge('B', 'C', 2);\n            graph.addEdge('C', 'B', 3);\n            graph.addEdge('C', 'A', 4);\n            graph.addEdge('D', 'B', 7);\n            graph.addEdge('E', 'D', 9);\n            graph.addEdge('E', 'F', 5);\n            graph.addEdge('E', 'G', 6);\n            graph.addEdge('F', 'C', 8);\n            graph.addEdge('F', 'G', 2);\n            graph.addEdge('G', 'A', 5);\n            graph.addEdge('G', 'F', 1);\n\n            graph.addEdge('E','Q',4);\n            graph.addEdge('Q','A',4);\n            graph.addEdge('E','R',3);\n            graph.addEdge('R','A',3);\n        }\n\n        switch (e.target.innerHTML){\n            case \"G1\":\n                G1();\n                setGraphState(graph);\n                break;\n            case \"G2\":\n                G2();\n                setGraphState(graph);\n                break;\n            case \"N\":\n                setGraphState(graph);\n                break;\n        }\n\n        setGraphState(graph);\n        getTvGraph();\n    }\n\n    function calculate_paths (e) {\n        e.preventDefault();\n\n        graph.adjacencyList = graphState.adjacencyList;\n\n        let paths = null;\n\n        if (!e.target[\"C\"].value.replaceAll(' ', '').isEmpty  && !e.target[\"B\"].value.replaceAll(' ', '').isEmpty && e.target[\"A\"].value != 0 && !e.target[\"A\"].value.isEmpty){\n            paths = graph.kShortestPaths(e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"C\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"A\"].value);\n            setAnswersList(() => ([{\n                k: e.target[\"A\"].value, \n                A: e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(), \n                B: e.target[\"C\"].value.replaceAll(' ', '').toUpperCase(), \n                paths: paths.paths,\n                costs: paths.costs,\n            }, ...answersList]))\n        };\n    }\n\n    function clearAnswerList () {\n        setAnswersList([])\n    }\n\n    \n\n    return (\n      <div className=\"main_UI_box\">\n          <p>Списки смежности <div class=\"infoBut\" title='Подробнее...' onClick={aboutGraph}>i</div></p> \n          <pre>{tvGraph}</pre>\n\n          <form id=\"set_node\" onSubmit={set_nodeState}>\n            <p>Добавить вершину</p>\n            <input class=\"inputField\" type='text' placeholder='[В1]' name=\"A\"></input>\n            <input class=\"inputField\" type='text' placeholder='[В2]' name=\"B\"></input>\n            <input class=\"inputField\" type='number' min = \"0\" placeholder='[Длина]' name=\"C\"></input>\n            <button class=\"addBut\" form=\"set_node\" type=\"submit\">Добавить</button>\n          </form>\n\n          <div class=\"demoGraphs\">Демо: \n            <div class = \"infoBut\" onClick={getDemo}>G1</div>\n            <div class = \"infoBut\" onClick={getDemo}>G2</div>\n            <div class = \"infoBut\" onClick={getDemo}>N</div>\n          </div>\n\n          <form id=\"calculate_paths\" onSubmit={calculate_paths}>\n            <p>Найти k наименьших путей <div class=\"infoBut\" title='Очистить...' onClick={clearAnswerList}>С</div> </p>\n            <input class=\"inputField\" type='number' min=\"0\" placeholder='[k]' name=\"A\"></input>\n            <input class=\"inputField\" type='text' placeholder='[В1]' name=\"B\"></input>\n            <input class=\"inputField\" type='text' placeholder='[В2]' name=\"C\"></input>\n            <button class=\"addBut\" form=\"calculate_paths\" type=\"submit\">Рассчитать</button>\n          </form>\n\n          <div class = \"answer_wrapper\">\n            {answersList.map((item) => (\n                <AnswerBox k = {item.k} A = {item.A} B = {item.B} paths = {item.paths} costs = {item.costs}/>\n            ))}\n          </div>\n   \n            \n      </div>\n    );\n  }\n  \n  export default UI;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}