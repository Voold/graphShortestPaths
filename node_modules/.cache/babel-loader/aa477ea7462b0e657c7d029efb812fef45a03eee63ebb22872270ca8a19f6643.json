{"ast":null,"code":"import{useEffect,useState}from'react';import'./UI.css';import AnswerBox from'./AnswerBox';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function UI(){class Graph{constructor(){this.adjacencyList={};// список смежности аля\n}clearGraph(){this.adjacencyList={};}//Добавить вершину\naddEdge(start,end,weight){if(!this.adjacencyList[start]){this.adjacencyList[start]=[];}if(Object.values(this.adjacencyList[start]).filter(item=>item.node===end).length==0){this.adjacencyList[start].push({node:end,weight:weight});}else{Object.values(this.adjacencyList[start]).map(item=>{if(item.node==end)item.weight=weight;});}// в список смежности к вершине вставляем узел (end) и вес пути к нему\n}getNeighbors(node){return this.adjacencyList[node]||[];}//Ищем кратчайший путь от 1 вершины до другой по Дейкстру\nfindShortestPath(start,end){const distances={};// расстояния\nconst previous={};// предыдущие\nconst queue=new PriorityQueue();// Очередь с приоритетом\nfor(const edge in this.adjacencyList){distances[edge]=Infinity;previous[edge]=null;}// Сперва проставили все расстояния как бесконечность, а предыдущие пустые\ndistances[start]=0;queue.enqueue(start,0);// Добавили в приоритетную очередь первую вершину\nwhile(!queue.isEmpty()){const currentEdge=queue.dequeue().element;// удаляет самый приоритетный элемент - возвращает его же\nif(currentEdge===end){const path=[];let temp=currentEdge;while(temp){path.push(temp);temp=previous[temp];}return path.reverse();}for(const neighbor of this.getNeighbors(currentEdge)){// for .. of - neighbor будет мини объектиком {node:.. ,weight:..}\nconst alt=distances[currentEdge]+neighbor.weight;if(alt<distances[neighbor.node]){distances[neighbor.node]=alt;// дистанция от соседнего узла\nprevious[neighbor.node]=currentEdge;// предыдущая вершина для соседнего узла  - эта вершина\nqueue.enqueue(neighbor.node,alt);// добавляем в приоритетную очередь [вершина, дистанция до нее] (приоритет по дистанции как раз)\n}}}return[];// Если путь не найден\n}kShortestPaths(start,end,k){let MRemovedEdges=[];const firstPath=this.findShortestPath(start,end);const paths=[firstPath.join('')];const pathCosts=[this.calculatePathCost(firstPath)];const uniquePaths=new Set(paths.map(path=>path));// Используем Set для уникальности\nfor(let i=0;i<Object.values(Object.values(graph)[0]).length;i++){let newPaths=[];for(let j=0;j<paths.length;j++){const path=paths[j];const pathCost=pathCosts[j];for(let n=0;n<path.length-1;n++){const tempNode=path[n];const rootPath=path.slice(0,n+1);const removedEdges=this.removeEdges(rootPath);MRemovedEdges.push(...removedEdges);//const tempPath = this.findShortestPath(start, end);\nconst tempPath=this.findShortestPath(tempNode,end);if(tempPath.length>0){const totalPath=rootPath+tempPath.slice(1).join(\"\");const totalCost=this.calculatePathCost(totalPath);const pathKey=totalPath;if(!uniquePaths.has(pathKey)&&totalPath[0]===start&&totalPath[totalPath.length-1]===end){newPaths.push({path:totalPath,cost:totalCost});uniquePaths.add(pathKey);// Добавляем путь в Set\n}}}}//this.restoreEdges(MRemovedEdges);\n// Сортируем новые пути по стоимости\nnewPaths.sort((a,b)=>a.cost-b.cost);// Добавляем только уникальные пути\nfor(const newPath of newPaths){if(paths.length<k){paths.push(newPath.path);pathCosts.push(newPath.cost);}else{break;// Если мы уже нашли k путей, выходим\n}}if(paths.length>=k)break;}this.restoreEdges(MRemovedEdges);return{paths:paths,costs:pathCosts};/* return paths.slice(0, k); */}calculatePathCost(path){let cost=0;for(let i=0;i<path.length-1;i++){const neighbors=this.getNeighbors(path[i]);for(const neighbor of neighbors){if(neighbor.node===path[i+1]){cost+=neighbor.weight;break;}}}return cost;}removeEdges(rootPath){const removedEdges=[];for(let i=0;i<rootPath.length-1;i++){const start=rootPath[i];const end=rootPath[i+1];const neighbors=this.getNeighbors(start);for(const neighbor of neighbors){if(neighbor.node===end){removedEdges.push({start:start,end:end,weight:neighbor.weight});this.adjacencyList[start]=this.adjacencyList[start].filter(edge=>edge.node!==end);break;}}}return removedEdges;}restoreEdges(removedEdges){for(const edge of removedEdges){this.addEdge(edge.start,edge.end,edge.weight);}}graphInfo(){console.log(this.adjacencyList);}}class PriorityQueue{constructor(){this.items=[];}enqueue(element,priority){this.items.push({element,priority});this.items.sort((a,b)=>a.priority-b.priority);}dequeue(){return this.items.shift();}isEmpty(){return this.items.length===0;}}let graph=new Graph();const[graphState,setGraphState]=useState(graph);const[tvGraph,setTvGraph]=useState(\"\");const[answersList,setAnswersList]=useState([]);const set_nodeState=e=>{e.preventDefault();graph.adjacencyList=graphState.adjacencyList;if(!e.target[\"A\"].value.replaceAll(' ','').isEmpty&&!e.target[\"B\"].value.replaceAll(' ','').isEmpty&&e.target[\"C\"].value!=0&&!e.target[\"C\"].value.isEmpty){graph.addEdge(e.target[\"A\"].value.replaceAll(' ','').toUpperCase(),e.target[\"B\"].value.replaceAll(' ','').toUpperCase(),+e.target[\"C\"].value);};setGraphState(graph);getTvGraph();};function getTvGraph(){let str=\"\";for(let node of Object.keys(graph.adjacencyList)){str+=\" |\"+node+\"| \";for(let neighbor of graph.getNeighbors(node)){str+=\" \"+neighbor.node;}str+=\"\\n\";}setTvGraph(str);}useEffect(()=>{setTvGraph(tvGraph);},[graphState]);function aboutGraph(){let info=\"Текущий граф:\\n\";graph.adjacencyList=graphState.adjacencyList;for(let node of Object.keys(graph.adjacencyList)){info+=\" |\"+node+\"| \";for(let neighbor of graph.getNeighbors(node)){info+=\" \"+neighbor.node+\" (\"+neighbor.weight+\") \";}info+=\"\\n\";}alert(info);}function getDemo(e){graph.clearGraph();const G1=()=>{graph.addEdge('A','B',2);graph.addEdge('A','C',10);graph.addEdge('A','D',3);graph.addEdge('B','C',3);graph.addEdge('D','C',1);graph.addEdge('C','E',2);graph.addEdge('E','D',5);};const G2=()=>{graph.addEdge('A','B',2);graph.addEdge('A','F',3);graph.addEdge('B','C',2);graph.addEdge('C','B',3);graph.addEdge('C','A',4);graph.addEdge('D','B',7);graph.addEdge('E','D',9);graph.addEdge('E','F',5);graph.addEdge('E','G',6);graph.addEdge('F','C',8);graph.addEdge('F','G',2);graph.addEdge('G','A',5);graph.addEdge('G','F',1);graph.addEdge('E','Q',4);graph.addEdge('Q','A',4);graph.addEdge('E','R',3);graph.addEdge('R','A',3);};switch(e.target.innerHTML){case\"G1\":G1();setGraphState(graph);break;case\"G2\":G2();setGraphState(graph);break;case\"N\":setGraphState(graph);break;}setGraphState(graph);getTvGraph();}function calculate_paths(e){e.preventDefault();graph.adjacencyList=graphState.adjacencyList;let paths=null;if(!e.target[\"C\"].value.replaceAll(' ','').isEmpty&&!e.target[\"B\"].value.replaceAll(' ','').isEmpty&&e.target[\"A\"].value!=0&&!e.target[\"A\"].value.isEmpty){paths=graph.kShortestPaths(e.target[\"B\"].value.replaceAll(' ','').toUpperCase(),e.target[\"C\"].value.replaceAll(' ','').toUpperCase(),e.target[\"A\"].value);setAnswersList(()=>[{k:e.target[\"A\"].value,A:e.target[\"B\"].value.replaceAll(' ','').toUpperCase(),B:e.target[\"C\"].value.replaceAll(' ','').toUpperCase(),paths:paths.paths,costs:paths.costs},...answersList]);};}function clearAnswerList(){setAnswersList([]);}return/*#__PURE__*/_jsxs(\"div\",{className:\"main_UI_box\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u0421\\u043F\\u0438\\u0441\\u043A\\u0438 \\u0441\\u043C\\u0435\\u0436\\u043D\\u043E\\u0441\\u0442\\u0438 \",/*#__PURE__*/_jsx(\"div\",{class:\"infoBut\",title:\"\\u041F\\u043E\\u0434\\u0440\\u043E\\u0431\\u043D\\u0435\\u0435...\",onClick:aboutGraph,children:\"i\"})]}),/*#__PURE__*/_jsx(\"pre\",{children:tvGraph}),/*#__PURE__*/_jsxs(\"form\",{id:\"set_node\",onSubmit:set_nodeState,children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"}),/*#__PURE__*/_jsx(\"input\",{class:\"inputField\",type:\"text\",placeholder:\"[\\u04121]\",name:\"A\"}),/*#__PURE__*/_jsx(\"input\",{class:\"inputField\",type:\"text\",placeholder:\"[\\u04122]\",name:\"B\"}),/*#__PURE__*/_jsx(\"input\",{class:\"inputField\",type:\"number\",min:\"0\",placeholder:\"[\\u0414\\u043B\\u0438\\u043D\\u0430]\",name:\"C\"}),/*#__PURE__*/_jsx(\"button\",{class:\"addBut\",form:\"set_node\",type:\"submit\",children:\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"demoGraphs\",children:[\"\\u0414\\u0435\\u043C\\u043E:\",/*#__PURE__*/_jsx(\"div\",{class:\"infoBut\",onClick:getDemo,children:\"G1\"}),/*#__PURE__*/_jsx(\"div\",{class:\"infoBut\",onClick:getDemo,children:\"G2\"}),/*#__PURE__*/_jsx(\"div\",{class:\"infoBut\",onClick:getDemo,children:\"N\"})]}),/*#__PURE__*/_jsxs(\"form\",{id:\"calculate_paths\",onSubmit:calculate_paths,children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u041D\\u0430\\u0439\\u0442\\u0438 k \\u043D\\u0430\\u0438\\u043C\\u0435\\u043D\\u044C\\u0448\\u0438\\u0445 \\u043F\\u0443\\u0442\\u0435\\u0439 \",/*#__PURE__*/_jsx(\"div\",{class:\"infoBut\",title:\"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C...\",onClick:clearAnswerList,children:\"\\u0421\"}),\" \"]}),/*#__PURE__*/_jsx(\"input\",{class:\"inputField\",type:\"number\",min:\"0\",placeholder:\"[k]\",name:\"A\"}),/*#__PURE__*/_jsx(\"input\",{class:\"inputField\",type:\"text\",placeholder:\"[\\u04121]\",name:\"B\"}),/*#__PURE__*/_jsx(\"input\",{class:\"inputField\",type:\"text\",placeholder:\"[\\u04122]\",name:\"C\"}),/*#__PURE__*/_jsx(\"button\",{class:\"addBut\",form:\"calculate_paths\",type:\"submit\",children:\"\\u0420\\u0430\\u0441\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C\"})]}),/*#__PURE__*/_jsx(\"div\",{class:\"answer_wrapper\",children:answersList.map(item=>/*#__PURE__*/_jsx(AnswerBox,{k:item.k,A:item.A,B:item.B,paths:item.paths,costs:item.costs}))})]});}export default UI;","map":{"version":3,"names":["useEffect","useState","AnswerBox","jsx","_jsx","jsxs","_jsxs","UI","Graph","constructor","adjacencyList","clearGraph","addEdge","start","end","weight","Object","values","filter","item","node","length","push","map","getNeighbors","findShortestPath","distances","previous","queue","PriorityQueue","edge","Infinity","enqueue","isEmpty","currentEdge","dequeue","element","path","temp","reverse","neighbor","alt","kShortestPaths","k","MRemovedEdges","firstPath","paths","join","pathCosts","calculatePathCost","uniquePaths","Set","i","graph","newPaths","j","pathCost","n","tempNode","rootPath","slice","removedEdges","removeEdges","tempPath","totalPath","totalCost","pathKey","has","cost","add","sort","a","b","newPath","restoreEdges","costs","neighbors","graphInfo","console","log","items","priority","shift","graphState","setGraphState","tvGraph","setTvGraph","answersList","setAnswersList","set_nodeState","e","preventDefault","target","value","replaceAll","toUpperCase","getTvGraph","str","keys","aboutGraph","info","alert","getDemo","G1","G2","innerHTML","calculate_paths","A","B","clearAnswerList","className","children","class","title","onClick","id","onSubmit","type","placeholder","name","min","form"],"sources":["/home/voold/Desktop/tg/src/UI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './UI.css';\nimport AnswerBox from './AnswerBox';\n\nfunction UI() {\n\n        class Graph {\n        constructor() {\n            this.adjacencyList = {}; // список смежности аля\n        }\n\n        clearGraph(){\n            this.adjacencyList ={};\n        }\n\n        //Добавить вершину\n        addEdge(start, end, weight) {\n            if (!this.adjacencyList[start]) {\n                this.adjacencyList[start] = [];\n            }\n            if (Object.values(this.adjacencyList[start]).filter((item) => (item.node === end)).length == 0){\n                this.adjacencyList[start].push({ node: end, weight: weight }); \n            } else {\n                Object.values(this.adjacencyList[start]).map((item) => {\n                                                                if (item.node == end)\n                                                                        item.weight = weight;\n                                                                })}\n            // в список смежности к вершине вставляем узел (end) и вес пути к нему\n\n        }\n\n        getNeighbors(node) {\n            return this.adjacencyList[node] || [];\n        }\n\n        //Ищем кратчайший путь от 1 вершины до другой по Дейкстру\n        findShortestPath(start, end) { \n            const distances = {}; // расстояния\n            const previous = {}; // предыдущие\n            const queue = new PriorityQueue(); // Очередь с приоритетом\n            \n            for (const edge in this.adjacencyList) {\n                distances[edge] = Infinity;\n                previous[edge] = null;\n            } // Сперва проставили все расстояния как бесконечность, а предыдущие пустые\n            \n            distances[start] = 0;\n            queue.enqueue(start, 0); // Добавили в приоритетную очередь первую вершину\n            \n            while (!queue.isEmpty()) {\n                const currentEdge = queue.dequeue().element; // удаляет самый приоритетный элемент - возвращает его же\n                \n                if (currentEdge === end) {\n                    const path = [];\n                    let temp = currentEdge;\n                    while (temp) {\n                        path.push(temp);\n                        temp = previous[temp];\n                    }\n                    return path.reverse();\n                }\n                \n                for (const neighbor of this.getNeighbors(currentEdge)) { // for .. of - neighbor будет мини объектиком {node:.. ,weight:..}\n                    const alt = distances[currentEdge] + neighbor.weight;\n                    if (alt < distances[neighbor.node]) {\n                        distances[neighbor.node] = alt; // дистанция от соседнего узла\n                        previous[neighbor.node] = currentEdge; // предыдущая вершина для соседнего узла  - эта вершина\n                        queue.enqueue(neighbor.node, alt); // добавляем в приоритетную очередь [вершина, дистанция до нее] (приоритет по дистанции как раз)\n                    }\n                }\n            }\n            \n            return []; // Если путь не найден\n        }\n\n        kShortestPaths(start, end, k) {\n            let MRemovedEdges = []\n            const firstPath = this.findShortestPath(start, end);\n            const paths = [firstPath.join('')];\n            const pathCosts = [this.calculatePathCost(firstPath)];\n            const uniquePaths = new Set(paths.map(path => path)); // Используем Set для уникальности\n\n            for (let i = 0; i < Object.values(Object.values(graph)[0]).length; i++) {\n                let newPaths = [];\n                for (let j = 0; j < paths.length; j++) {\n                    const path = paths[j];\n                    const pathCost = pathCosts[j];\n\n                    for (let n = 0; n < path.length - 1; n++) {\n                        const tempNode = path[n];\n                        const rootPath = path.slice(0, n + 1);\n                        const removedEdges = this.removeEdges(rootPath);\n                        MRemovedEdges.push(...removedEdges);\n\n\n                        //const tempPath = this.findShortestPath(start, end);\n                        const tempPath = this.findShortestPath(tempNode, end);\n                \n\n                        if (tempPath.length > 0 ) {\n\n                            const totalPath = rootPath + tempPath.slice(1).join(\"\");\n                            const totalCost = this.calculatePathCost(totalPath);\n                            \n                            const pathKey = totalPath;\n                            if (!uniquePaths.has(pathKey) && (totalPath[0] === start) && (totalPath[totalPath.length-1] === end) ) {\n                                newPaths.push({ path: totalPath, cost: totalCost });\n                                uniquePaths.add(pathKey); // Добавляем путь в Set\n                            }\n                        }\n                    }\n                }\n\n                \n                //this.restoreEdges(MRemovedEdges);\n\n                // Сортируем новые пути по стоимости\n                newPaths.sort((a, b) => a.cost - b.cost);\n\n                // Добавляем только уникальные пути\n                for (const newPath of newPaths) {\n                    if (paths.length < k) {\n                        paths.push(newPath.path);\n                        pathCosts.push(newPath.cost);\n                    } else {\n                        break; // Если мы уже нашли k путей, выходим\n                    }\n                }\n\n                if (paths.length >= k) break;\n            }\n\n            this.restoreEdges(MRemovedEdges);\n\n            return {paths: paths, costs: pathCosts};\n            /* return paths.slice(0, k); */\n        }\n\n\n\n        calculatePathCost(path) {\n            let cost = 0;\n            for (let i = 0; i < path.length - 1; i++) {\n                const neighbors = this.getNeighbors(path[i]);\n                for (const neighbor of neighbors) {\n                    if (neighbor.node === path[i + 1]) {\n                        cost += neighbor.weight;\n                        break;\n                    }\n                }\n            }\n            return cost;\n        }\n\n\n\n        removeEdges(rootPath) {\n            const removedEdges = [];\n            for (let i = 0; i < rootPath.length - 1; i++) {\n                const start = rootPath[i];\n                const end = rootPath[i + 1];\n                const neighbors = this.getNeighbors(start);\n                for (const neighbor of neighbors) {\n                    if (neighbor.node === end) {\n                        removedEdges.push({ start: start, end: end, weight: neighbor.weight });\n                        this.adjacencyList[start] = this.adjacencyList[start].filter(edge => edge.node !== end);\n                        break;\n                    }\n                }\n            }\n\n            return removedEdges;\n        }\n\n        restoreEdges(removedEdges) {\n            for (const edge of removedEdges) {\n                this.addEdge(edge.start, edge.end, edge.weight);\n            }\n        }\n\n        graphInfo () {\n            console.log(this.adjacencyList);\n        }\n    }\n\n    class PriorityQueue {\n        constructor() {\n            this.items = [];\n        }\n\n        enqueue(element, priority) {\n            this.items.push({ element, priority });\n            this.items.sort((a, b) => a.priority - b.priority);\n        }\n\n        dequeue() {\n            return this.items.shift();\n        }\n\n        isEmpty() {\n            return this.items.length === 0;\n        }\n    }\n\n    let graph = new Graph();\n\n    const [graphState, setGraphState] = useState(graph)\n    const [tvGraph, setTvGraph] = useState(\"\")\n    const [answersList, setAnswersList] = useState([])\n\n    const set_nodeState = (e) => {\n        e.preventDefault();\n\n        graph.adjacencyList = graphState.adjacencyList;\n\n\n        if (!e.target[\"A\"].value.replaceAll(' ', '').isEmpty  && !e.target[\"B\"].value.replaceAll(' ', '').isEmpty && e.target[\"C\"].value != 0 && !e.target[\"C\"].value.isEmpty){\n            graph.addEdge(e.target[\"A\"].value.replaceAll(' ', '').toUpperCase(),e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(),+e.target[\"C\"].value);\n        };\n            \n        setGraphState(graph);\n\n        getTvGraph();\n    };\n\n    function getTvGraph () {\n        let str = \"\";\n\n        for (let node of Object.keys(graph.adjacencyList)){\n            str += \" |\" + node + \"| \";\n            for (let neighbor of graph.getNeighbors(node)){\n                str += (\" \" + neighbor.node)\n            }\n            str+=\"\\n\"\n        }\n        setTvGraph(str);\n    }\n\n    useEffect(() => {\n        setTvGraph(tvGraph);\n      },[graphState]) \n\n    function aboutGraph () {\n        let info = \"Текущий граф:\\n\"\n\n        graph.adjacencyList = graphState.adjacencyList;\n\n        for (let node of Object.keys(graph.adjacencyList)){\n            info += \" |\" + node + \"| \";\n            for (let neighbor of graph.getNeighbors(node)){\n                info += (\" \" + neighbor.node + \" (\"+neighbor.weight+\") \")\n            }\n            info+=\"\\n\"\n        }\n        alert(info);\n    }\n\n    function getDemo (e) {\n\n        graph.clearGraph();\n\n        const G1 = () => {\n            graph.addEdge('A', 'B', 2);\n            graph.addEdge('A', 'C', 10);\n            graph.addEdge('A', 'D', 3);\n            graph.addEdge('B', 'C', 3);\n            graph.addEdge('D', 'C', 1);\n            graph.addEdge('C', 'E', 2);\n            graph.addEdge('E', 'D', 5);\n        }\n\n        const G2 = () => {\n            graph.addEdge('A', 'B', 2);\n            graph.addEdge('A', 'F', 3);\n            graph.addEdge('B', 'C', 2);\n            graph.addEdge('C', 'B', 3);\n            graph.addEdge('C', 'A', 4);\n            graph.addEdge('D', 'B', 7);\n            graph.addEdge('E', 'D', 9);\n            graph.addEdge('E', 'F', 5);\n            graph.addEdge('E', 'G', 6);\n            graph.addEdge('F', 'C', 8);\n            graph.addEdge('F', 'G', 2);\n            graph.addEdge('G', 'A', 5);\n            graph.addEdge('G', 'F', 1);\n\n            graph.addEdge('E','Q',4);\n            graph.addEdge('Q','A',4);\n            graph.addEdge('E','R',3);\n            graph.addEdge('R','A',3);\n        }\n\n        switch (e.target.innerHTML){\n            case \"G1\":\n                G1();\n                setGraphState(graph);\n                break;\n            case \"G2\":\n                G2();\n                setGraphState(graph);\n                break;\n            case \"N\":\n                setGraphState(graph);\n                break;\n        }\n\n        setGraphState(graph);\n        getTvGraph();\n    }\n\n    function calculate_paths (e) {\n        e.preventDefault();\n\n        graph.adjacencyList = graphState.adjacencyList;\n\n        let paths = null;\n\n        if (!e.target[\"C\"].value.replaceAll(' ', '').isEmpty  && !e.target[\"B\"].value.replaceAll(' ', '').isEmpty && e.target[\"A\"].value != 0 && !e.target[\"A\"].value.isEmpty){\n            paths = graph.kShortestPaths(e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"C\"].value.replaceAll(' ', '').toUpperCase(), e.target[\"A\"].value);\n            setAnswersList(() => ([{\n                k: e.target[\"A\"].value, \n                A: e.target[\"B\"].value.replaceAll(' ', '').toUpperCase(), \n                B: e.target[\"C\"].value.replaceAll(' ', '').toUpperCase(), \n                paths: paths.paths,\n                costs: paths.costs,\n            }, ...answersList]))\n        };\n    }\n\n    function clearAnswerList () {\n        setAnswersList([])\n    }\n\n    \n\n    return (\n      <div className=\"main_UI_box\">\n          <p>Списки смежности <div class=\"infoBut\" title='Подробнее...' onClick={aboutGraph}>i</div></p> \n          <pre>{tvGraph}</pre>\n\n          <form id=\"set_node\" onSubmit={set_nodeState}>\n            <p>Добавить вершину</p>\n            <input class=\"inputField\" type='text' placeholder='[В1]' name=\"A\"></input>\n            <input class=\"inputField\" type='text' placeholder='[В2]' name=\"B\"></input>\n            <input class=\"inputField\" type='number' min = \"0\" placeholder='[Длина]' name=\"C\"></input>\n            <button class=\"addBut\" form=\"set_node\" type=\"submit\">Добавить</button>\n          </form>\n\n          <div class=\"demoGraphs\">Демо: \n            <div class = \"infoBut\" onClick={getDemo}>G1</div>\n            <div class = \"infoBut\" onClick={getDemo}>G2</div>\n            <div class = \"infoBut\" onClick={getDemo}>N</div>\n          </div>\n\n          <form id=\"calculate_paths\" onSubmit={calculate_paths}>\n            <p>Найти k наименьших путей <div class=\"infoBut\" title='Очистить...' onClick={clearAnswerList}>С</div> </p>\n            <input class=\"inputField\" type='number' min=\"0\" placeholder='[k]' name=\"A\"></input>\n            <input class=\"inputField\" type='text' placeholder='[В1]' name=\"B\"></input>\n            <input class=\"inputField\" type='text' placeholder='[В2]' name=\"C\"></input>\n            <button class=\"addBut\" form=\"calculate_paths\" type=\"submit\">Рассчитать</button>\n          </form>\n\n          <div class = \"answer_wrapper\">\n            {answersList.map((item) => (\n                <AnswerBox k = {item.k} A = {item.A} B = {item.B} paths = {item.paths} costs = {item.costs}/>\n            ))}\n          </div>\n   \n            \n      </div>\n    );\n  }\n  \n  export default UI;\n  "],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAO,UAAU,CACjB,MAAO,CAAAC,SAAS,KAAM,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpC,QAAS,CAAAC,EAAEA,CAAA,CAAG,CAEN,KAAM,CAAAC,KAAM,CACZC,WAAWA,CAAA,CAAG,CACV,IAAI,CAACC,aAAa,CAAG,CAAC,CAAC,CAAE;AAC7B,CAEAC,UAAUA,CAAA,CAAE,CACR,IAAI,CAACD,aAAa,CAAE,CAAC,CAAC,CAC1B,CAEA;AACAE,OAAOA,CAACC,KAAK,CAAEC,GAAG,CAAEC,MAAM,CAAE,CACxB,GAAI,CAAC,IAAI,CAACL,aAAa,CAACG,KAAK,CAAC,CAAE,CAC5B,IAAI,CAACH,aAAa,CAACG,KAAK,CAAC,CAAG,EAAE,CAClC,CACA,GAAIG,MAAM,CAACC,MAAM,CAAC,IAAI,CAACP,aAAa,CAACG,KAAK,CAAC,CAAC,CAACK,MAAM,CAAEC,IAAI,EAAMA,IAAI,CAACC,IAAI,GAAKN,GAAI,CAAC,CAACO,MAAM,EAAI,CAAC,CAAC,CAC3F,IAAI,CAACX,aAAa,CAACG,KAAK,CAAC,CAACS,IAAI,CAAC,CAAEF,IAAI,CAAEN,GAAG,CAAEC,MAAM,CAAEA,MAAO,CAAC,CAAC,CACjE,CAAC,IAAM,CACHC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACP,aAAa,CAACG,KAAK,CAAC,CAAC,CAACU,GAAG,CAAEJ,IAAI,EAAK,CACP,GAAIA,IAAI,CAACC,IAAI,EAAIN,GAAG,CACZK,IAAI,CAACJ,MAAM,CAAGA,MAAM,CAC5B,CAAC,CAAC,EACtD;AAEJ,CAEAS,YAAYA,CAACJ,IAAI,CAAE,CACf,MAAO,KAAI,CAACV,aAAa,CAACU,IAAI,CAAC,EAAI,EAAE,CACzC,CAEA;AACAK,gBAAgBA,CAACZ,KAAK,CAAEC,GAAG,CAAE,CACzB,KAAM,CAAAY,SAAS,CAAG,CAAC,CAAC,CAAE;AACtB,KAAM,CAAAC,QAAQ,CAAG,CAAC,CAAC,CAAE;AACrB,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,aAAa,CAAC,CAAC,CAAE;AAEnC,IAAK,KAAM,CAAAC,IAAI,GAAI,KAAI,CAACpB,aAAa,CAAE,CACnCgB,SAAS,CAACI,IAAI,CAAC,CAAGC,QAAQ,CAC1BJ,QAAQ,CAACG,IAAI,CAAC,CAAG,IAAI,CACzB,CAAE;AAEFJ,SAAS,CAACb,KAAK,CAAC,CAAG,CAAC,CACpBe,KAAK,CAACI,OAAO,CAACnB,KAAK,CAAE,CAAC,CAAC,CAAE;AAEzB,MAAO,CAACe,KAAK,CAACK,OAAO,CAAC,CAAC,CAAE,CACrB,KAAM,CAAAC,WAAW,CAAGN,KAAK,CAACO,OAAO,CAAC,CAAC,CAACC,OAAO,CAAE;AAE7C,GAAIF,WAAW,GAAKpB,GAAG,CAAE,CACrB,KAAM,CAAAuB,IAAI,CAAG,EAAE,CACf,GAAI,CAAAC,IAAI,CAAGJ,WAAW,CACtB,MAAOI,IAAI,CAAE,CACTD,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,CACfA,IAAI,CAAGX,QAAQ,CAACW,IAAI,CAAC,CACzB,CACA,MAAO,CAAAD,IAAI,CAACE,OAAO,CAAC,CAAC,CACzB,CAEA,IAAK,KAAM,CAAAC,QAAQ,GAAI,KAAI,CAAChB,YAAY,CAACU,WAAW,CAAC,CAAE,CAAE;AACrD,KAAM,CAAAO,GAAG,CAAGf,SAAS,CAACQ,WAAW,CAAC,CAAGM,QAAQ,CAACzB,MAAM,CACpD,GAAI0B,GAAG,CAAGf,SAAS,CAACc,QAAQ,CAACpB,IAAI,CAAC,CAAE,CAChCM,SAAS,CAACc,QAAQ,CAACpB,IAAI,CAAC,CAAGqB,GAAG,CAAE;AAChCd,QAAQ,CAACa,QAAQ,CAACpB,IAAI,CAAC,CAAGc,WAAW,CAAE;AACvCN,KAAK,CAACI,OAAO,CAACQ,QAAQ,CAACpB,IAAI,CAAEqB,GAAG,CAAC,CAAE;AACvC,CACJ,CACJ,CAEA,MAAO,EAAE,CAAE;AACf,CAEAC,cAAcA,CAAC7B,KAAK,CAAEC,GAAG,CAAE6B,CAAC,CAAE,CAC1B,GAAI,CAAAC,aAAa,CAAG,EAAE,CACtB,KAAM,CAAAC,SAAS,CAAG,IAAI,CAACpB,gBAAgB,CAACZ,KAAK,CAAEC,GAAG,CAAC,CACnD,KAAM,CAAAgC,KAAK,CAAG,CAACD,SAAS,CAACE,IAAI,CAAC,EAAE,CAAC,CAAC,CAClC,KAAM,CAAAC,SAAS,CAAG,CAAC,IAAI,CAACC,iBAAiB,CAACJ,SAAS,CAAC,CAAC,CACrD,KAAM,CAAAK,WAAW,CAAG,GAAI,CAAAC,GAAG,CAACL,KAAK,CAACvB,GAAG,CAACc,IAAI,EAAIA,IAAI,CAAC,CAAC,CAAE;AAEtD,IAAK,GAAI,CAAAe,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGpC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACoC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAChC,MAAM,CAAE+B,CAAC,EAAE,CAAE,CACpE,GAAI,CAAAE,QAAQ,CAAG,EAAE,CACjB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,KAAK,CAACzB,MAAM,CAAEkC,CAAC,EAAE,CAAE,CACnC,KAAM,CAAAlB,IAAI,CAAGS,KAAK,CAACS,CAAC,CAAC,CACrB,KAAM,CAAAC,QAAQ,CAAGR,SAAS,CAACO,CAAC,CAAC,CAE7B,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGpB,IAAI,CAAChB,MAAM,CAAG,CAAC,CAAEoC,CAAC,EAAE,CAAE,CACtC,KAAM,CAAAC,QAAQ,CAAGrB,IAAI,CAACoB,CAAC,CAAC,CACxB,KAAM,CAAAE,QAAQ,CAAGtB,IAAI,CAACuB,KAAK,CAAC,CAAC,CAAEH,CAAC,CAAG,CAAC,CAAC,CACrC,KAAM,CAAAI,YAAY,CAAG,IAAI,CAACC,WAAW,CAACH,QAAQ,CAAC,CAC/Cf,aAAa,CAACtB,IAAI,CAAC,GAAGuC,YAAY,CAAC,CAGnC;AACA,KAAM,CAAAE,QAAQ,CAAG,IAAI,CAACtC,gBAAgB,CAACiC,QAAQ,CAAE5C,GAAG,CAAC,CAGrD,GAAIiD,QAAQ,CAAC1C,MAAM,CAAG,CAAC,CAAG,CAEtB,KAAM,CAAA2C,SAAS,CAAGL,QAAQ,CAAGI,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC,CACvD,KAAM,CAAAkB,SAAS,CAAG,IAAI,CAAChB,iBAAiB,CAACe,SAAS,CAAC,CAEnD,KAAM,CAAAE,OAAO,CAAGF,SAAS,CACzB,GAAI,CAACd,WAAW,CAACiB,GAAG,CAACD,OAAO,CAAC,EAAKF,SAAS,CAAC,CAAC,CAAC,GAAKnD,KAAM,EAAKmD,SAAS,CAACA,SAAS,CAAC3C,MAAM,CAAC,CAAC,CAAC,GAAKP,GAAI,CAAG,CACnGwC,QAAQ,CAAChC,IAAI,CAAC,CAAEe,IAAI,CAAE2B,SAAS,CAAEI,IAAI,CAAEH,SAAU,CAAC,CAAC,CACnDf,WAAW,CAACmB,GAAG,CAACH,OAAO,CAAC,CAAE;AAC9B,CACJ,CACJ,CACJ,CAGA;AAEA;AACAZ,QAAQ,CAACgB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAACH,IAAI,CAAGI,CAAC,CAACJ,IAAI,CAAC,CAExC;AACA,IAAK,KAAM,CAAAK,OAAO,GAAI,CAAAnB,QAAQ,CAAE,CAC5B,GAAIR,KAAK,CAACzB,MAAM,CAAGsB,CAAC,CAAE,CAClBG,KAAK,CAACxB,IAAI,CAACmD,OAAO,CAACpC,IAAI,CAAC,CACxBW,SAAS,CAAC1B,IAAI,CAACmD,OAAO,CAACL,IAAI,CAAC,CAChC,CAAC,IAAM,CACH,MAAO;AACX,CACJ,CAEA,GAAItB,KAAK,CAACzB,MAAM,EAAIsB,CAAC,CAAE,MAC3B,CAEA,IAAI,CAAC+B,YAAY,CAAC9B,aAAa,CAAC,CAEhC,MAAO,CAACE,KAAK,CAAEA,KAAK,CAAE6B,KAAK,CAAE3B,SAAS,CAAC,CACvC,+BACJ,CAIAC,iBAAiBA,CAACZ,IAAI,CAAE,CACpB,GAAI,CAAA+B,IAAI,CAAG,CAAC,CACZ,IAAK,GAAI,CAAAhB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGf,IAAI,CAAChB,MAAM,CAAG,CAAC,CAAE+B,CAAC,EAAE,CAAE,CACtC,KAAM,CAAAwB,SAAS,CAAG,IAAI,CAACpD,YAAY,CAACa,IAAI,CAACe,CAAC,CAAC,CAAC,CAC5C,IAAK,KAAM,CAAAZ,QAAQ,GAAI,CAAAoC,SAAS,CAAE,CAC9B,GAAIpC,QAAQ,CAACpB,IAAI,GAAKiB,IAAI,CAACe,CAAC,CAAG,CAAC,CAAC,CAAE,CAC/BgB,IAAI,EAAI5B,QAAQ,CAACzB,MAAM,CACvB,MACJ,CACJ,CACJ,CACA,MAAO,CAAAqD,IAAI,CACf,CAIAN,WAAWA,CAACH,QAAQ,CAAE,CAClB,KAAM,CAAAE,YAAY,CAAG,EAAE,CACvB,IAAK,GAAI,CAAAT,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGO,QAAQ,CAACtC,MAAM,CAAG,CAAC,CAAE+B,CAAC,EAAE,CAAE,CAC1C,KAAM,CAAAvC,KAAK,CAAG8C,QAAQ,CAACP,CAAC,CAAC,CACzB,KAAM,CAAAtC,GAAG,CAAG6C,QAAQ,CAACP,CAAC,CAAG,CAAC,CAAC,CAC3B,KAAM,CAAAwB,SAAS,CAAG,IAAI,CAACpD,YAAY,CAACX,KAAK,CAAC,CAC1C,IAAK,KAAM,CAAA2B,QAAQ,GAAI,CAAAoC,SAAS,CAAE,CAC9B,GAAIpC,QAAQ,CAACpB,IAAI,GAAKN,GAAG,CAAE,CACvB+C,YAAY,CAACvC,IAAI,CAAC,CAAET,KAAK,CAAEA,KAAK,CAAEC,GAAG,CAAEA,GAAG,CAAEC,MAAM,CAAEyB,QAAQ,CAACzB,MAAO,CAAC,CAAC,CACtE,IAAI,CAACL,aAAa,CAACG,KAAK,CAAC,CAAG,IAAI,CAACH,aAAa,CAACG,KAAK,CAAC,CAACK,MAAM,CAACY,IAAI,EAAIA,IAAI,CAACV,IAAI,GAAKN,GAAG,CAAC,CACvF,MACJ,CACJ,CACJ,CAEA,MAAO,CAAA+C,YAAY,CACvB,CAEAa,YAAYA,CAACb,YAAY,CAAE,CACvB,IAAK,KAAM,CAAA/B,IAAI,GAAI,CAAA+B,YAAY,CAAE,CAC7B,IAAI,CAACjD,OAAO,CAACkB,IAAI,CAACjB,KAAK,CAAEiB,IAAI,CAAChB,GAAG,CAAEgB,IAAI,CAACf,MAAM,CAAC,CACnD,CACJ,CAEA8D,SAASA,CAAA,CAAI,CACTC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrE,aAAa,CAAC,CACnC,CACJ,CAEA,KAAM,CAAAmB,aAAc,CAChBpB,WAAWA,CAAA,CAAG,CACV,IAAI,CAACuE,KAAK,CAAG,EAAE,CACnB,CAEAhD,OAAOA,CAACI,OAAO,CAAE6C,QAAQ,CAAE,CACvB,IAAI,CAACD,KAAK,CAAC1D,IAAI,CAAC,CAAEc,OAAO,CAAE6C,QAAS,CAAC,CAAC,CACtC,IAAI,CAACD,KAAK,CAACV,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAACU,QAAQ,CAAGT,CAAC,CAACS,QAAQ,CAAC,CACtD,CAEA9C,OAAOA,CAAA,CAAG,CACN,MAAO,KAAI,CAAC6C,KAAK,CAACE,KAAK,CAAC,CAAC,CAC7B,CAEAjD,OAAOA,CAAA,CAAG,CACN,MAAO,KAAI,CAAC+C,KAAK,CAAC3D,MAAM,GAAK,CAAC,CAClC,CACJ,CAEA,GAAI,CAAAgC,KAAK,CAAG,GAAI,CAAA7C,KAAK,CAAC,CAAC,CAEvB,KAAM,CAAC2E,UAAU,CAAEC,aAAa,CAAC,CAAGnF,QAAQ,CAACoD,KAAK,CAAC,CACnD,KAAM,CAACgC,OAAO,CAAEC,UAAU,CAAC,CAAGrF,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACsF,WAAW,CAAEC,cAAc,CAAC,CAAGvF,QAAQ,CAAC,EAAE,CAAC,CAElD,KAAM,CAAAwF,aAAa,CAAIC,CAAC,EAAK,CACzBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElBtC,KAAK,CAAC3C,aAAa,CAAGyE,UAAU,CAACzE,aAAa,CAG9C,GAAI,CAACgF,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAAC7D,OAAO,EAAK,CAACyD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAAC7D,OAAO,EAAIyD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,EAAI,CAAC,EAAI,CAACH,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC5D,OAAO,CAAC,CAClKoB,KAAK,CAACzC,OAAO,CAAC8E,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAACL,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAACL,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CACnJ,CAAC,CAEDT,aAAa,CAAC/B,KAAK,CAAC,CAEpB2C,UAAU,CAAC,CAAC,CAChB,CAAC,CAED,QAAS,CAAAA,UAAUA,CAAA,CAAI,CACnB,GAAI,CAAAC,GAAG,CAAG,EAAE,CAEZ,IAAK,GAAI,CAAA7E,IAAI,GAAI,CAAAJ,MAAM,CAACkF,IAAI,CAAC7C,KAAK,CAAC3C,aAAa,CAAC,CAAC,CAC9CuF,GAAG,EAAI,IAAI,CAAG7E,IAAI,CAAG,IAAI,CACzB,IAAK,GAAI,CAAAoB,QAAQ,GAAI,CAAAa,KAAK,CAAC7B,YAAY,CAACJ,IAAI,CAAC,CAAC,CAC1C6E,GAAG,EAAK,GAAG,CAAGzD,QAAQ,CAACpB,IAAK,CAChC,CACA6E,GAAG,EAAE,IAAI,CACb,CACAX,UAAU,CAACW,GAAG,CAAC,CACnB,CAEAjG,SAAS,CAAC,IAAM,CACZsF,UAAU,CAACD,OAAO,CAAC,CACrB,CAAC,CAAC,CAACF,UAAU,CAAC,CAAC,CAEjB,QAAS,CAAAgB,UAAUA,CAAA,CAAI,CACnB,GAAI,CAAAC,IAAI,CAAG,iBAAiB,CAE5B/C,KAAK,CAAC3C,aAAa,CAAGyE,UAAU,CAACzE,aAAa,CAE9C,IAAK,GAAI,CAAAU,IAAI,GAAI,CAAAJ,MAAM,CAACkF,IAAI,CAAC7C,KAAK,CAAC3C,aAAa,CAAC,CAAC,CAC9C0F,IAAI,EAAI,IAAI,CAAGhF,IAAI,CAAG,IAAI,CAC1B,IAAK,GAAI,CAAAoB,QAAQ,GAAI,CAAAa,KAAK,CAAC7B,YAAY,CAACJ,IAAI,CAAC,CAAC,CAC1CgF,IAAI,EAAK,GAAG,CAAG5D,QAAQ,CAACpB,IAAI,CAAG,IAAI,CAACoB,QAAQ,CAACzB,MAAM,CAAC,IAAK,CAC7D,CACAqF,IAAI,EAAE,IAAI,CACd,CACAC,KAAK,CAACD,IAAI,CAAC,CACf,CAEA,QAAS,CAAAE,OAAOA,CAAEZ,CAAC,CAAE,CAEjBrC,KAAK,CAAC1C,UAAU,CAAC,CAAC,CAElB,KAAM,CAAA4F,EAAE,CAAGA,CAAA,GAAM,CACblD,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,EAAE,CAAC,CAC3ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC9B,CAAC,CAED,KAAM,CAAA4F,EAAE,CAAGA,CAAA,GAAM,CACbnD,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAC1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAE1ByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CACxByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CACxByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CACxByC,KAAK,CAACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAC5B,CAAC,CAED,OAAQ8E,CAAC,CAACE,MAAM,CAACa,SAAS,EACtB,IAAK,IAAI,CACLF,EAAE,CAAC,CAAC,CACJnB,aAAa,CAAC/B,KAAK,CAAC,CACpB,MACJ,IAAK,IAAI,CACLmD,EAAE,CAAC,CAAC,CACJpB,aAAa,CAAC/B,KAAK,CAAC,CACpB,MACJ,IAAK,GAAG,CACJ+B,aAAa,CAAC/B,KAAK,CAAC,CACpB,MACR,CAEA+B,aAAa,CAAC/B,KAAK,CAAC,CACpB2C,UAAU,CAAC,CAAC,CAChB,CAEA,QAAS,CAAAU,eAAeA,CAAEhB,CAAC,CAAE,CACzBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElBtC,KAAK,CAAC3C,aAAa,CAAGyE,UAAU,CAACzE,aAAa,CAE9C,GAAI,CAAAoC,KAAK,CAAG,IAAI,CAEhB,GAAI,CAAC4C,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAAC7D,OAAO,EAAK,CAACyD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAAC7D,OAAO,EAAIyD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,EAAI,CAAC,EAAI,CAACH,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC5D,OAAO,CAAC,CAClKa,KAAK,CAAGO,KAAK,CAACX,cAAc,CAACgD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAAEL,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAAEL,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAC/JL,cAAc,CAAC,IAAO,CAAC,CACnB7C,CAAC,CAAE+C,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CACtBc,CAAC,CAAEjB,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CACxDa,CAAC,CAAElB,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,KAAK,CAACC,UAAU,CAAC,GAAG,CAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CACxDjD,KAAK,CAAEA,KAAK,CAACA,KAAK,CAClB6B,KAAK,CAAE7B,KAAK,CAAC6B,KACjB,CAAC,CAAE,GAAGY,WAAW,CAAE,CAAC,CACxB,CAAC,CACL,CAEA,QAAS,CAAAsB,eAAeA,CAAA,CAAI,CACxBrB,cAAc,CAAC,EAAE,CAAC,CACtB,CAIA,mBACElF,KAAA,QAAKwG,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBzG,KAAA,MAAAyG,QAAA,EAAG,8FAAiB,cAAA3G,IAAA,QAAK4G,KAAK,CAAC,SAAS,CAACC,KAAK,CAAC,2DAAc,CAACC,OAAO,CAAEf,UAAW,CAAAY,QAAA,CAAC,GAAC,CAAK,CAAC,EAAG,CAAC,cAC9F3G,IAAA,QAAA2G,QAAA,CAAM1B,OAAO,CAAM,CAAC,cAEpB/E,KAAA,SAAM6G,EAAE,CAAC,UAAU,CAACC,QAAQ,CAAE3B,aAAc,CAAAsB,QAAA,eAC1C3G,IAAA,MAAA2G,QAAA,CAAG,6FAAgB,CAAG,CAAC,cACvB3G,IAAA,UAAO4G,KAAK,CAAC,YAAY,CAACK,IAAI,CAAC,MAAM,CAACC,WAAW,CAAC,WAAM,CAACC,IAAI,CAAC,GAAG,CAAQ,CAAC,cAC1EnH,IAAA,UAAO4G,KAAK,CAAC,YAAY,CAACK,IAAI,CAAC,MAAM,CAACC,WAAW,CAAC,WAAM,CAACC,IAAI,CAAC,GAAG,CAAQ,CAAC,cAC1EnH,IAAA,UAAO4G,KAAK,CAAC,YAAY,CAACK,IAAI,CAAC,QAAQ,CAACG,GAAG,CAAG,GAAG,CAACF,WAAW,CAAC,kCAAS,CAACC,IAAI,CAAC,GAAG,CAAQ,CAAC,cACzFnH,IAAA,WAAQ4G,KAAK,CAAC,QAAQ,CAACS,IAAI,CAAC,UAAU,CAACJ,IAAI,CAAC,QAAQ,CAAAN,QAAA,CAAC,kDAAQ,CAAQ,CAAC,EAClE,CAAC,cAEPzG,KAAA,QAAK0G,KAAK,CAAC,YAAY,CAAAD,QAAA,EAAC,2BACtB,cAAA3G,IAAA,QAAK4G,KAAK,CAAG,SAAS,CAACE,OAAO,CAAEZ,OAAQ,CAAAS,QAAA,CAAC,IAAE,CAAK,CAAC,cACjD3G,IAAA,QAAK4G,KAAK,CAAG,SAAS,CAACE,OAAO,CAAEZ,OAAQ,CAAAS,QAAA,CAAC,IAAE,CAAK,CAAC,cACjD3G,IAAA,QAAK4G,KAAK,CAAG,SAAS,CAACE,OAAO,CAAEZ,OAAQ,CAAAS,QAAA,CAAC,GAAC,CAAK,CAAC,EAC7C,CAAC,cAENzG,KAAA,SAAM6G,EAAE,CAAC,iBAAiB,CAACC,QAAQ,CAAEV,eAAgB,CAAAK,QAAA,eACnDzG,KAAA,MAAAyG,QAAA,EAAG,+HAAyB,cAAA3G,IAAA,QAAK4G,KAAK,CAAC,SAAS,CAACC,KAAK,CAAC,qDAAa,CAACC,OAAO,CAAEL,eAAgB,CAAAE,QAAA,CAAC,QAAC,CAAK,CAAC,IAAC,EAAG,CAAC,cAC3G3G,IAAA,UAAO4G,KAAK,CAAC,YAAY,CAACK,IAAI,CAAC,QAAQ,CAACG,GAAG,CAAC,GAAG,CAACF,WAAW,CAAC,KAAK,CAACC,IAAI,CAAC,GAAG,CAAQ,CAAC,cACnFnH,IAAA,UAAO4G,KAAK,CAAC,YAAY,CAACK,IAAI,CAAC,MAAM,CAACC,WAAW,CAAC,WAAM,CAACC,IAAI,CAAC,GAAG,CAAQ,CAAC,cAC1EnH,IAAA,UAAO4G,KAAK,CAAC,YAAY,CAACK,IAAI,CAAC,MAAM,CAACC,WAAW,CAAC,WAAM,CAACC,IAAI,CAAC,GAAG,CAAQ,CAAC,cAC1EnH,IAAA,WAAQ4G,KAAK,CAAC,QAAQ,CAACS,IAAI,CAAC,iBAAiB,CAACJ,IAAI,CAAC,QAAQ,CAAAN,QAAA,CAAC,8DAAU,CAAQ,CAAC,EAC3E,CAAC,cAEP3G,IAAA,QAAK4G,KAAK,CAAG,gBAAgB,CAAAD,QAAA,CAC1BxB,WAAW,CAAChE,GAAG,CAAEJ,IAAI,eAClBf,IAAA,CAACF,SAAS,EAACyC,CAAC,CAAIxB,IAAI,CAACwB,CAAE,CAACgE,CAAC,CAAIxF,IAAI,CAACwF,CAAE,CAACC,CAAC,CAAIzF,IAAI,CAACyF,CAAE,CAAC9D,KAAK,CAAI3B,IAAI,CAAC2B,KAAM,CAAC6B,KAAK,CAAIxD,IAAI,CAACwD,KAAM,CAAC,CAC/F,CAAC,CACC,CAAC,EAGL,CAAC,CAEV,CAEA,cAAe,CAAApE,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}